import java.awt.Desktop

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id "com.github.node-gradle.node" version "7.0.0"
}

group = 'com'
version = '0.0.2'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

node {
	download.set(true)
	version = '20.2.0'
	npmInstall.args.set(['--force', '--info'])
	nodeProjectDir.set(file("./src/main/js"));
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'org.springframework.boot:spring-boot-starter-amqp'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.springframework.session:spring-session-core'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	implementation 'org.apache.commons:commons-lang3:3.13.0'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
//	implementation 'org.siouan:frontend-gradle-plugin:3.0.1'
	compileOnly 'org.projectlombok:lombok'
//	runtimeOnly 'io.micrometer:micrometer-registry-datadog'
//	runtimeOnly 'io.micrometer:micrometer-registry-new-relic'
//	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

tasks.register("bootRunDev") {
	group = "application"
	description = "Runs the Spring Boot application with the dev profile"
	doFirst {
		tasks.bootRun {
			configure {
				environment "spring.profiles.active" , "dev"
			}

			doLast {
				Desktop.desktop.browse "http://localhost:8080".toURI()
			}
		}
	}

	finalizedBy("bootRun")
}

//tasks.register('npmRunBuild', NpmTask) {
//	args = ['run', 'build']
//
//	dependsOn npmInstall
//
//	inputs.files(fileTree('src/main/js/node_modules'))
//	inputs.files(fileTree('src/main/resources'))
//	inputs.file('src/main/js/package.json')
//	inputs.file('src/main/js/webpack.config.js')
//	outputs.dir("$buildDir/resources/main/static")
//}

tasks.register('devserver', NpmTask) {
	args = ['run', 'devserver']
}

tasks.bootRun {
	configure {
		environment "spring.profiles.active" , "production"
	}
}

tasks.withType(JavaCompile).configureEach {
	options.incremental = true
}

tasks.named("compileJava") { outputs.upToDateWhen { false }  }

//processResources {
//	dependsOn npmRunBuild
//}

//sourceSets {
//	main {
//		resources {
//			srcDirs = ['src/main/resources', 'build/resources/main']
//		}
//	}
//}
